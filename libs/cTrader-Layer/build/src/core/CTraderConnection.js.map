{"version":3,"file":"CTraderConnection.js","sourceRoot":"","sources":["../../../src/core/CTraderConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as EventEmitter from \"events\";\nimport * as path from \"path\";\nimport { v1 } from \"uuid\";\nimport { CTraderCommandMap } from \"#commands/CTraderCommandMap\";\nimport { CTraderEncoderDecoder } from \"#encoder-decoder/CTraderEncoderDecoder\";\nimport { CTraderSocket } from \"#sockets/CTraderSocket\";\nimport { GenericObject } from \"#utilities/GenericObject\";\nimport { CTraderProtobufReader } from \"#protobuf/CTraderProtobufReader\";\nimport { CTraderConnectionParameters } from \"#CTraderConnectionParameters\";\nimport axios from \"axios\";\n\nexport class CTraderConnection extends EventEmitter {\n    readonly #commandMap: CTraderCommandMap;\n    readonly #encoderDecoder: CTraderEncoderDecoder;\n    readonly #protobufReader;\n    readonly #socket: CTraderSocket;\n    #resolveConnectionPromise?: (...parameters: any[]) => void;\n    #rejectConnectionPromise?: (...parameters: any[]) => void;\n\n    public constructor ({ host, port, }: CTraderConnectionParameters) {\n        super();\n\n        this.#commandMap = new CTraderCommandMap({ send: (data: any): void => this.#send(data), });\n        this.#encoderDecoder = new CTraderEncoderDecoder();\n        // eslint-disable-next-line max-len\n        this.#protobufReader = new CTraderProtobufReader([ {\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiCommonMessages.proto\"),\n        }, {\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiMessages.proto\"),\n        }, ]);\n        this.#socket = new CTraderSocket({ host, port, });\n        this.#resolveConnectionPromise = undefined;\n        this.#rejectConnectionPromise = undefined;\n\n        this.#encoderDecoder.setDecodeHandler((data) => this.#onDecodedData(this.#protobufReader.decode(data)));\n        this.#protobufReader.load();\n        this.#protobufReader.build();\n\n        this.#socket.onOpen = (): void => this.#onOpen();\n        this.#socket.onData = (data: any): void => this.#onData(data);\n        this.#socket.onClose = (): void => this.#onClose();\n    }\n\n    public getPayloadTypeByName (name: string): number | undefined {\n        return this.#protobufReader.getPayloadTypeByName(name);\n    }\n\n    async sendCommand (payloadType: string | number, data?: GenericObject): Promise<GenericObject> {\n        const clientMsgId: string = v1();\n        const normalizedPayloadType = this.#protobufReader.resolveIdentifierToPayloadType(payloadType);\n\n        if (normalizedPayloadType === undefined) {\n            throw new Error(`Unknown payload type or identifier: ${payloadType}`);\n        }\n\n        const message: any = this.#protobufReader.encode(normalizedPayloadType, data ?? {}, clientMsgId);\n\n        return this.#commandMap.create({ clientMsgId, message, });\n    }\n\n    async trySendCommand (payloadType: string | number, data?: GenericObject): Promise<GenericObject | undefined> {\n        try {\n            return await this.sendCommand(payloadType, data);\n        }\n        catch {\n            return undefined;\n        }\n    }\n\n    public sendHeartbeat (): void {\n        this.sendCommand(\"ProtoHeartbeatEvent\");\n    }\n\n    public open (): Promise<unknown> {\n        const connectionPromise = new Promise((resolve, reject) => {\n            this.#resolveConnectionPromise = resolve;\n            this.#rejectConnectionPromise = reject;\n        });\n\n        this.#socket.connect();\n\n        return connectionPromise;\n    }\n\n    public override on (type: string | symbol, listener: (...parameters: any) => any): this {\n        let normalizedType: string | symbol = type;\n\n        if (typeof type === \"string\") {\n            const resolvedPayloadType = this.#protobufReader.resolveIdentifierToPayloadType(type);\n            if (resolvedPayloadType !== undefined) {\n                normalizedType = resolvedPayloadType.toString();\n            }\n            else if (!Number.isFinite(Number.parseInt(type, 10))) {\n                console.warn(`Attempted to listen for unknown event type: ${type}. Listener might not be triggered.`);\n            }\n        }\n        return super.on(normalizedType, listener);\n    }\n\n    #send (data: GenericObject): void {\n        this.#socket.send(this.#encoderDecoder.encode(data));\n    }\n\n    #onOpen (): void {\n        if (this.#resolveConnectionPromise) {\n            this.#resolveConnectionPromise();\n        }\n\n        this.#resolveConnectionPromise = undefined;\n        this.#rejectConnectionPromise = undefined;\n    }\n\n    #onData (data: Buffer): void {\n        this.#encoderDecoder.decode(data);\n    }\n\n    #onDecodedData (data: GenericObject): void {\n        const payloadType = data.payloadType;\n        const payload = data.payload;\n        const clientMsgId = data.clientMsgId;\n        const sentCommand = this.#commandMap.extractById(clientMsgId);\n\n        if (sentCommand) {\n            if (typeof payload.errorCode === \"string\" || typeof payload.errorCode === \"number\") {\n                sentCommand.reject(payload);\n            }\n            else {\n                sentCommand.resolve(payload);\n            }\n        }\n        else {\n            this.#onPushEvent(payloadType, data.payload);\n        }\n    }\n\n    #onClose (): void {\n        // Silence is golden.\n    }\n\n    #onPushEvent (payloadType: number, message: GenericObject): void {\n        this.emit(payloadType.toString(), message);\n    }\n\n    public static async getAccessTokenProfile (accessToken: string): Promise<GenericObject> {\n        return JSON.parse(await axios.get(`https://api.spotware.com/connect/profile?access_token=${accessToken}`));\n    }\n\n    public static async getAccessTokenAccounts (accessToken: string): Promise<GenericObject[]> {\n        const parsedResponse: any = JSON.parse(await axios.get(`https://api.spotware.com/connect/tradingaccounts?access_token=${accessToken}`));\n\n        if (!Array.isArray(parsedResponse)) {\n            return [];\n        }\n\n        return parsedResponse;\n    }\n}\n"]}