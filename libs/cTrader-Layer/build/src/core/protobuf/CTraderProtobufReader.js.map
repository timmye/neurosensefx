{"version":3,"file":"CTraderProtobufReader.js","sourceRoot":"","sources":["../../../../src/core/protobuf/CTraderProtobufReader.ts"],"names":[],"mappings":"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","sourcesContent":["import { GenericObject } from \"#utilities/GenericObject\";\n\nconst protobuf = require(\"protobufjs\");\n\nexport class CTraderProtobufReader {\n    #params: any;\n    #builder: any;\n    readonly #payloadTypes: { [key: string]: any };\n    readonly #names: { [key: string]: any };\n    readonly #messages: { [key: string]: any };\n    readonly #enums: { [key: string]: any };\n\n    public constructor (options: GenericObject) {\n        this.#params = options;\n        this.#builder = undefined;\n        this.#payloadTypes = {};\n        this.#names = {};\n        this.#messages = {};\n        this.#enums = {};\n    }\n\n    public encode (payloadType: number, params: GenericObject, clientMsgId: string): any {\n        const Message = this.getMessageByPayloadType(payloadType);\n        if (!Message) {\n            throw new Error(`No message definition found for payloadType: ${payloadType}`);\n        }\n        const message = new Message(params);\n\n        return this.#wrap(payloadType, message, clientMsgId).encode();\n    }\n\n    public decode (buffer: GenericObject): any {\n        const protoMessage = this.getMessageByName(\"ProtoMessage\").decode(buffer);\n        const payloadType = protoMessage.payloadType;\n        const messageDecoder = this.getMessageByPayloadType(payloadType);\n\n        if (!messageDecoder) {\n            return {\n                payload: null,\n                payloadType: payloadType,\n                clientMsgId: protoMessage.clientMsgId,\n            };\n        }\n\n        return {\n            payload: messageDecoder.decode(protoMessage.payload),\n            payloadType: payloadType,\n            clientMsgId: protoMessage.clientMsgId,\n        };\n    }\n\n    #wrap (payloadType: number, message: GenericObject, clientMsgId: string): any {\n        const ProtoMessage = this.getMessageByName(\"ProtoMessage\");\n        return new ProtoMessage({\n            payloadType: payloadType,\n            payload: message.toBuffer(),\n            clientMsgId: clientMsgId,\n        });\n    }\n\n    public load (): void {\n        this.#params.forEach((param: any) => {\n            this.#builder = protobuf.loadProtoFile(param.file, this.#builder);\n        });\n    }\n\n    public build (): any {\n        const builder: any = this.#builder;\n        builder.build();\n\n        // First, cache all enums.\n        builder.ns.children.forEach((reflect: any) => {\n            if (reflect.className === \"Enum\") {\n                this.#enums[reflect.name] = builder.build(reflect.name);\n            }\n        });\n\n        // Then, cache all messages and their payload types.\n        builder.ns.children.forEach((reflect: any) => {\n            if (reflect.className === \"Message\") {\n                const messageName = reflect.name;\n                const messageBuilded = builder.build(messageName);\n                this.#messages[messageName] = messageBuilded;\n\n                const payloadType = this.findPayloadType(reflect);\n\n                if (payloadType !== undefined) {\n                    this.#names[messageName] = {\n                        messageBuilded: messageBuilded,\n                        payloadType: payloadType,\n                    };\n                    this.#payloadTypes[payloadType] = {\n                        messageBuilded: messageBuilded,\n                        name: messageName,\n                    };\n                }\n            }\n        });\n\n        this.#buildWrapper();\n    }\n\n    #buildWrapper (): void {\n        const name = \"ProtoMessage\";\n        const messageBuilded = this.#builder.build(name);\n\n        this.#messages[name] = messageBuilded;\n        this.#names[name] = {\n            messageBuilded: messageBuilded,\n            payloadType: undefined,\n        };\n    }\n\n    public findPayloadType (message: GenericObject): number | undefined {\n        const field = message.children.find((field: any) => field.name === \"payloadType\");\n        if (!field) {\n            return undefined;\n        }\n\n        const defaultValue = field.defaultValue;\n        if (typeof defaultValue === \"number\") {\n            return defaultValue;\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return this.getPayloadTypeByEnumName(defaultValue);\n        }\n\n        return undefined;\n    }\n\n    public getMessageByPayloadType (payloadType: number): any {\n        const payloadInfo = this.#payloadTypes[payloadType];\n        return payloadInfo ? payloadInfo.messageBuilded : undefined;\n    }\n\n    public getMessageByName (name: string): any {\n        const nameInfo = this.#names[name];\n        return nameInfo ? nameInfo.messageBuilded : undefined;\n    }\n\n    public getPayloadTypeByName (name: string): number | undefined {\n        const nameInfo = this.#names[name];\n        return nameInfo ? nameInfo.payloadType : undefined;\n    }\n\n    public getPayloadTypeByEnumName (enumName: string): number | undefined {\n        const protoOAPayloadType = this.#enums[\"ProtoOAPayloadType\"];\n        if (protoOAPayloadType && typeof protoOAPayloadType[enumName] === \"number\") {\n            return protoOAPayloadType[enumName];\n        }\n        const protoPayloadType = this.#enums[\"ProtoPayloadType\"];\n        if (protoPayloadType && typeof protoPayloadType[enumName] === \"number\") {\n            return protoPayloadType[enumName];\n        }\n        return undefined;\n    }\n\n    public resolveIdentifierToPayloadType (identifier: string | number): number | undefined {\n        if (typeof identifier === \"number\") {\n            return identifier;\n        }\n\n        // Try as SCREAMING_SNAKE_CASE enum name\n        const enumValue = this.getPayloadTypeByEnumName(identifier);\n        if (enumValue !== undefined) {\n            return enumValue;\n        }\n\n        // Try as PascalCase message name (from this.#names)\n        const nameInfo = this.#names[identifier];\n        if (nameInfo && typeof nameInfo.payloadType === \"number\") {\n            return nameInfo.payloadType;\n        }\n\n        return undefined;\n    }\n}\n"]}