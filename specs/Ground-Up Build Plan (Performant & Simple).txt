Ground-Up Build Plan (Performant & Simple)
You are an expert front-end architect specializing in real-time, high-performance web applications. You need to outline a step-by-step build plan for a web-based price feed display system from the ground up, prioritizing performance, lean code, and simplicity.

**Project Goal:** Display up to 20 independent, real-time price feed visualizations in a single browser tab, with maximum performance and minimal resource consumption.

**Technical Decisions Made:**
* **Rendering:** HTML Canvas 2D API (for all dynamic visual elements within each display).
* **Data Processing:** Dedicated Web Worker for receiving live WebSocket tick data, performing all calculations (market profile, volatility, etc.), and sending only render-ready state updates to the main thread.
* **Live Data Ingestion:** WebSockets.
* **Front-end Framework:** Svelte (or similar highly performant/lean framework if justified).
* **State Management:** Centralized store on the main thread to hold processed data for all 20 displays.
* **Tooling:** Module bundler (Vite or Webpack), npm/Yarn, ESLint, Prettier.

**Current State:** Starting from scratch in VS Code.

**Task:**
Provide a concise, numbered, step-by-step plan for building this application from the ground up. Each step should include:
* A clear action item.
* Brief explanation of "why" this step is crucial for performance or simplicity.
* Mention of relevant files/technologies involved.

**Focus on the front-end aspects.** Assume basic HTML structure for mounting the app is already in place.

**Ground-Up Build Plan Steps:**

1.  **Project Initialization & Tooling:**
    * Action: Initialize Node.js project, install core dev dependencies (bundler, linter, formatter).
    * Why: Sets up the essential development environment for modularity, code quality, and efficient build processes.
    * Files/Tech: `package.json`, `webpack.config.js` (or `vite.config.js`), `.eslintrc.json`, `.prettierrc`.

2.  **WebSocket Data Ingestion (Main Thread):**
    * Action: Set up the WebSocket connection to receive raw live tick data.
    * Why: Establishes the real-time data pipeline.
    * Files/Tech: `src/data/wsClient.js` (or similar).

3.  **Web Worker for Data Processing:**
    * Action: Create a Web Worker script responsible for receiving raw ticks, processing them, and calculating display-specific data.
    * Why: Crucial for offloading heavy computation from the main UI thread, ensuring responsiveness and high frame rates.
    * Files/Tech: `src/workers/dataProcessor.js`.

4.  **Worker-Main Thread Communication:**
    * Action: Implement efficient communication channels between the Web Worker and the main thread. Worker sends processed, render-ready data; Main thread sends configuration/control messages to worker.
    * Why: Minimizes data transfer overhead; only essential data is passed, avoiding blocking.
    * Files/Tech: `postMessage`, `onmessage` listeners.

5.  **Centralized State Management (Main Thread):**
    * Action: Set up a central store on the main thread to hold the latest processed data for all 20 displays.
    * Why: Provides a single source of truth for all visualization components, simplifying data flow and updates.
    * Files/Tech: `src/data/dataStore.js` (or using framework's state management).

6.  **Core Canvas Visualization Component:**
    * Action: Develop a reusable Svelte (or framework) component that encapsulates a single price feed display. This component will contain a `<canvas>` element and all its drawing logic.
    * Why: Encapsulates complexity, promotes reusability for 20 instances, and leverages canvas for performance.
    * Files/Tech: `src/components/VizDisplay.svelte` (or `VizDisplay.js`), Canvas 2D API.

7.  **Implement Canvas Drawing Logic:**
    * Action: Within the Canvas component, implement functions to draw all visual elements (market profile, price float, meters, etc.) directly onto the canvas using the Canvas 2D API.
    * Why: This is the core of the high-performance rendering, avoiding DOM manipulation overhead.
    * Files/Tech: Canvas 2D API methods (e.g., `fillRect`, `arc`, `lineTo`, `fillText`).

8.  **Integrate with State Store & Render Loop:**
    * Action: Connect each Canvas component to the central state store so it receives its specific data updates. Implement a `requestAnimationFrame` loop *within each component's canvas drawing logic* or a single global render loop that orchestrates updates for all canvases.
    * Why: Ensures displays update efficiently only when new data is available and synchronizes with browser's refresh rate.
    * Files/Tech: `requestAnimationFrame`, component props/store subscriptions.

9.  **Scale to Multiple Instances:**
    * Action: Dynamically create and render 20 instances of the Canvas visualization component, each connected to its own data stream/slice in the central store.
    * Why: Demonstrates the scalability of the chosen architecture with minimal performance degradation.
    * Files/Tech: Looping to create components in main app file.

10. **Performance Profiling & Optimization:**
    * Action: Use browser developer tools (Performance, Memory tabs) to profile the running application with 20 instances. Identify and resolve any bottlenecks (e.g., excessive re-renders, memory leaks).
    * Why: Crucial for fine-tuning and ensuring real-world performance meets targets.
    * Files/Tech: Browser Dev Tools.
