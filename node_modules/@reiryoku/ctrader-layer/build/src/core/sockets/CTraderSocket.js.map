{"version":3,"file":"CTraderSocket.js","sourceRoot":"","sources":["../../../../src/core/sockets/CTraderSocket.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2BAA2B;AAE3B,8EAAyE;AAEzE,MAAM,SAAS,GAAY,6CAAqB,CAAC,SAAS,EAAE,CAAC;AAE7D,MAAa,aAAa;IAMtB,YAAoB,EAAE,IAAI,EAAE,IAAI,GAA4B;QAL5D,sCAAuB;QACvB,sCAAuB;QACvB,2CAA2B;QAC3B,2CAAuB;QAGnB,uBAAA,IAAI,uBAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,uBAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,4BAAc,SAAS,MAAA,CAAC;QAC5B,uBAAA,IAAI,4BAAc,SAAS,MAAA,CAAC;IAChC,CAAC;IAED,IAAW,IAAI;QACX,OAAO,uBAAA,IAAI,2BAAM,CAAC;IACtB,CAAC;IAED,IAAW,IAAI;QACX,OAAO,uBAAA,IAAI,2BAAM,CAAC;IACtB,CAAC;IAEM,OAAO;QACV,IAAI,SAAS,EAAE;YACX,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,SAAS,uBAAA,IAAI,2BAAM,IAAI,uBAAA,IAAI,2BAAM,EAAE,CAAC,CAAC;YAClE,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC;YAElC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAE/C,uBAAA,IAAI,4BAAc,MAAM,MAAA,CAAC;SAC5B;aACI;YAED,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,uBAAA,IAAI,2BAAM,EAAE,uBAAA,IAAI,2BAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjC,uBAAA,IAAI,4BAAc,MAAM,MAAA,CAAC;SAC5B;IACL,CAAC;IAEM,UAAU;;QACb,MAAA,uBAAA,IAAI,gCAAW,0CAAE,OAAO,EAAE,CAAC;QAC3B,MAAA,uBAAA,IAAI,gCAAW,0CAAE,KAAK,EAAE,CAAC;IAC7B,CAAC;IAEM,IAAI,CAAE,MAAc;;QACvB,MAAA,uBAAA,IAAI,gCAAW,0CAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAA,uBAAA,IAAI,gCAAW,0CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEM,MAAM;IAEb,CAAC;IAEM,MAAM,CAAE,GAAG,UAAiB;IAEnC,CAAC;IAEM,OAAO;IAEd,CAAC;IAEM,OAAO;IAEd,CAAC;CACJ;AAtED,sCAsEC","sourcesContent":["import * as tls from \"tls\";\nimport { CTraderSocketParameters } from \"#sockets/CTraderSocketParameters\";\nimport { CTraderLayerUtilities } from \"#utilities/CTraderLayerUtilities\";\n\nconst isBrowser: boolean = CTraderLayerUtilities.isBrowser();\n\nexport class CTraderSocket {\n    readonly #host: string;\n    readonly #port: number;\n    #tlsSocket?: tls.TLSSocket;\n    #webSocket?: WebSocket;\n\n    public constructor ({ host, port, }: CTraderSocketParameters) {\n        this.#host = host;\n        this.#port = port;\n        this.#tlsSocket = undefined;\n        this.#webSocket = undefined;\n    }\n\n    public get host (): string {\n        return this.#host;\n    }\n\n    public get port (): number {\n        return this.#port;\n    }\n\n    public connect (): void {\n        if (isBrowser) {\n            const socket = new WebSocket(`wss://${this.#host}:${this.#port}`);\n            socket.binaryType = \"arraybuffer\";\n\n            socket.addEventListener(\"open\", this.onOpen);\n            socket.addEventListener(\"message\", this.onData);\n            socket.addEventListener(\"close\", this.onClose);\n            socket.addEventListener(\"error\", this.onError);\n\n            this.#webSocket = socket;\n        }\n        else {\n            // @ts-ignore\n            const socket = tls.connect(this.#port, this.#host, this.onOpen);\n\n            socket.on(\"data\", this.onData);\n            socket.on(\"end\", this.onClose);\n            socket.on(\"error\", this.onError);\n\n            this.#tlsSocket = socket;\n        }\n    }\n\n    public disconnect (): void {\n        this.#tlsSocket?.destroy();\n        this.#webSocket?.close();\n    }\n\n    public send (buffer: Buffer): void {\n        this.#tlsSocket?.write(buffer);\n        this.#webSocket?.send(buffer);\n    }\n\n    public onOpen (): void {\n        // Silence is golden\n    }\n\n    public onData (...parameters: any[]): void {\n        // Silence is golden\n    }\n\n    public onClose (): void {\n        // Silence is golden\n    }\n\n    public onError (): void {\n        // Silence is golden\n    }\n}\n"]}