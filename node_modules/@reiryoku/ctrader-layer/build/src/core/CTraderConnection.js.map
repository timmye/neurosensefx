{"version":3,"file":"CTraderConnection.js","sourceRoot":"","sources":["../../../src/core/CTraderConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport { v1 } from \"uuid\";\nimport axios from \"axios\";\nimport { CTraderCommandMap } from \"#commands/CTraderCommandMap\";\nimport { CTraderEncoderDecoder } from \"#encoder-decoder/CTraderEncoderDecoder\";\nimport { CTraderSocket } from \"#sockets/CTraderSocket\";\nimport { GenericObject } from \"#utilities/GenericObject\";\nimport { CTraderProtobufReader } from \"#protobuf/CTraderProtobufReader\";\nimport { CTraderConnectionParameters } from \"#CTraderConnectionParameters\";\nimport { CTraderCommand } from \"#commands/CTraderCommand\";\nimport { CTraderLayerEmitter } from \"#utilities/emitters/CTraderLayerEmitter\";\nimport { CTraderLayerEventListener } from \"#events/CTraderLayerEventListener\";\nimport { CTraderLayerEvent } from \"#events/CTraderLayerEvent\";\n\nexport class CTraderConnection {\n    readonly #commandMap: CTraderCommandMap;\n    readonly #encoderDecoder: CTraderEncoderDecoder;\n    readonly #protobufReader;\n    readonly #socket: CTraderSocket;\n    readonly #emitter: CTraderLayerEmitter;\n    #resolveConnectionPromise?: (...parameters: any[]) => void;\n    #rejectConnectionPromise?: (...parameters: any[]) => void;\n\n    public constructor ({ host, port, }: CTraderConnectionParameters) {\n        this.#commandMap = new CTraderCommandMap({ send: (data: any): void => this.#send(data), });\n        this.#encoderDecoder = new CTraderEncoderDecoder();\n        this.#protobufReader = new CTraderProtobufReader([ {\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiCommonMessages.proto\"),\n        }, {\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiMessages.proto\"),\n        }, ]);\n        this.#socket = new CTraderSocket({ host, port, });\n        this.#emitter = new CTraderLayerEmitter();\n        this.#resolveConnectionPromise = undefined;\n        this.#rejectConnectionPromise = undefined;\n\n        this.#encoderDecoder.setDecodeHandler((data) => this.#onDecodedData(this.#protobufReader.decode(data)));\n        this.#protobufReader.load();\n        this.#protobufReader.build();\n\n        this.#socket.onOpen = (): void => this.#onOpen();\n        this.#socket.onData = (data: any): void => this.#onData(data);\n        this.#socket.onClose = (): void => this.#onClose();\n    }\n\n    public getPayloadTypeByName (name: string): number {\n        return this.#protobufReader.getPayloadTypeByName(name);\n    }\n\n    public getPayloadNameByType (type: number): string {\n        return this.#protobufReader.getPayloadNameByType(type);\n    }\n\n    async sendCommand (payloadName: string, data?: GenericObject, messageId?: string): Promise<GenericObject> {\n        const clientMsgId: string = messageId ?? v1();\n        const payloadType: number = this.getPayloadTypeByName(payloadName);\n        const message: any = this.#protobufReader.encode(payloadType, data ?? {}, clientMsgId);\n        const responsePromise: Promise<GenericObject> = this.#commandMap.create({ clientMsgId, message, });\n\n        if (payloadName.substr(-5).toUpperCase() === \"EVENT\") {\n            const sentCommand: CTraderCommand = this.#commandMap.extractById(clientMsgId) as CTraderCommand;\n\n            sentCommand.resolve({});\n        }\n\n        if (payloadName.substr(-3).toUpperCase() === \"REQ\") {\n            const responsePayloadType: number = this.getPayloadTypeByName(`${payloadName.substr(0, payloadName.length - 3)}Res`);\n\n            if (responsePayloadType === -1) {\n                const sentCommand: CTraderCommand = this.#commandMap.extractById(clientMsgId) as CTraderCommand;\n\n                sentCommand.resolve({});\n            }\n        }\n\n        return responsePromise;\n    }\n\n    async trySendCommand (payloadName: string, data?: GenericObject, messageId?: string): Promise<GenericObject | undefined> {\n        try {\n            return await this.sendCommand(payloadName, data, messageId);\n        }\n        catch {\n            return undefined;\n        }\n    }\n\n    public sendHeartbeat (): void {\n        this.sendCommand(\"ProtoHeartbeatEvent\");\n    }\n\n    public open (): Promise<unknown> {\n        const connectionPromise = new Promise((resolve, reject) => {\n            this.#resolveConnectionPromise = resolve;\n            this.#rejectConnectionPromise = reject;\n        });\n\n        this.#socket.connect();\n\n        return connectionPromise;\n    }\n\n    public close (): void {\n        this.#socket.disconnect();\n    }\n\n    public on (payloadName: string): Promise<CTraderLayerEvent>\n    public on (payloadName: string, listener: CTraderLayerEventListener): string\n    public on (payloadName: string, listener?: CTraderLayerEventListener): Promise<CTraderLayerEvent> | string {\n        const payloadType: string = this.getPayloadTypeByName(payloadName).toString();\n\n        if (!listener) {\n            return this.#emitter.on(payloadType);\n        }\n\n        return this.#emitter.on(payloadType, listener);\n    }\n\n    public removeEventListener (uuid: string): void {\n        this.#emitter.removeEventListener(uuid);\n    }\n\n    #send (data: GenericObject): void {\n        this.#socket.send(this.#encoderDecoder.encode(data));\n    }\n\n    #onOpen (): void {\n        if (this.#resolveConnectionPromise) {\n            this.#resolveConnectionPromise();\n        }\n\n        this.#resolveConnectionPromise = undefined;\n        this.#rejectConnectionPromise = undefined;\n    }\n\n    #onData (data: Buffer): void {\n        this.#encoderDecoder.decode(data);\n    }\n\n    #onDecodedData (data: GenericObject): void {\n        const payloadType = data.payloadType;\n        const payload = data.payload;\n        const clientMsgId = data.clientMsgId;\n        const sentCommand = this.#commandMap.extractById(clientMsgId);\n        const normalizedPayload = JSON.parse(payload.encodeJSON());\n        const payloadName: string = this.getPayloadNameByType(payloadType);\n\n        if (clientMsgId) {\n            normalizedPayload.clientMsgId = clientMsgId;\n        }\n\n        if (payloadName.substr(-5).toUpperCase() === \"EVENT\") {\n            this.#onPushEvent(payloadType, normalizedPayload);\n        }\n        else if (payloadName.substr(-3).toUpperCase() === \"RES\" && sentCommand) {\n            if (typeof payload.errorCode === \"string\" || typeof payload.errorCode === \"number\") {\n                sentCommand.reject(normalizedPayload);\n            }\n            else {\n                sentCommand.resolve(normalizedPayload);\n            }\n        }\n        else {\n            console.log(`Unknown payload type ${payloadType}`);\n        }\n    }\n\n    #onClose (): void {\n        // Silence is golden.\n    }\n\n    #onPushEvent (payloadType: number, message: GenericObject): void {\n        this.#emitter.notifyListeners(payloadType.toString(), message);\n    }\n\n    public static async getAccessTokenProfile (accessToken: string): Promise<GenericObject> {\n        const URI = `https://api.spotware.com/connect/profile?access_token=${accessToken}`;\n\n        return JSON.parse((await axios.get(URI)).data);\n    }\n\n    public static async getAccessTokenAccounts (accessToken: string): Promise<GenericObject[]> {\n        const URI = `https://api.spotware.com/connect/tradingaccounts?access_token=${accessToken}`;\n        const parsedResponse: any = JSON.parse((await axios.get(URI)).data);\n\n        if (!Array.isArray(parsedResponse)) {\n            return [];\n        }\n\n        return parsedResponse;\n    }\n}\n"]}